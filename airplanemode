#!/usr/bin/env python3
"""Power off network and kill Internet-only daemons."""

import configparser
import os
import subprocess

# The programs to terminate
RELEVANT_APPS = ['Caffeine', 'Dropbox', 'Google Drive']


class State(object):
    @property
    def bluetooth(self):
        """Is bluetooth on? Lazy instantiates to the current status."""
        if not hasattr(self, '_bluetooth'):
            output = subprocess.check_output('blueutil status', shell=True)
            self._bluetooth = 'on' in str(output)
        return self._bluetooth

    @bluetooth.setter
    def bluetooth(self, status):
        self._bluetooth = status

    @property
    def wifi(self):
        """Is wifi on? Lazy instantiates to the current status."""
        if not hasattr(self, '_wifi'):
            cmd = 'networksetup -getairportpower en0'
            output = subprocess.check_output(cmd, shell=True)
            self._wifi = 'On' in str(output)
        return self._wifi

    @wifi.setter
    def wifi(self, status):
        self._wifi = status

    @property
    def apps(self):
        """Which of the relevant apps are active? Lazy instantiate."""
        if not hasattr(self, '_apps'):
            self._apps = [app for app in RELEVANT_APPS if is_running(app)]
        return self._apps

    @apps.setter
    def apps(self, active_apps):
        self._apps = active_apps

    def write(self):
        config = configparser.ConfigParser()
        config['PREVSTATE'] = {
            'bluetooth': str(self.bluetooth),
            'wifi': str(self.wifi),
            'apps': ','.join(self.apps)
        }
        home = os.path.expanduser('~')
        with open(os.path.join(home, '.airplanemode.ini'), 'w+') as configfile:
            config.write(configfile)

    @staticmethod
    def from_save():
        config = configparser.ConfigParser()
        home = os.path.expanduser('~')
        config.read(os.path.join(home, '.airplanemode.ini'))
        state = State()
        state.bluetooth = config.getboolean('PREVSTATE', 'bluetooth')
        state.wifi = config.getboolean('PREVSTATE', 'wifi')
        apps = config['PREVSTATE']['apps']
        if apps:
            state.apps = apps.split(',')

        return state


def airplane_mode_enabled():
    home = os.path.expanduser('~')
    return os.path.exists(os.path.join(home, '.airplanemode.ini'))


def is_running(program):
    return subprocess.call(['pgrep', program]) == 0


def main():
    if airplane_mode_enabled():
        # re-enable previously disabled state
        prev_state = State.from_save()
        if prev_state.bluetooth:
            subprocess.call(['blueutil', 'on'])
        if prev_state.wifi:
            subprocess.call(['networksetup', '-setairportpower', 'en0', 'on'])
        for app in prev_state.apps:
            subprocess.call(['open', '-a', app])
        home = os.path.expanduser('~')
        os.remove(os.path.join(home, '.airplanemode.ini'))

    else:
        # disable default apps
        curr_state = State()
        curr_state.write()
        if curr_state.bluetooth:
            subprocess.call(['blueutil', 'off'])
        if curr_state.wifi:
            subprocess.call(['networksetup', '-setairportpower', 'en0', 'off'])
        for app in curr_state.apps:
            subprocess.call(['pkill', app])


if __name__ == '__main__':
    main()
